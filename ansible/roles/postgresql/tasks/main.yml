---
# ========================================================
# PostgreSQLのリポジトリをインストール
# ========================================================z
- name: PostgreSQL{{ pg_number }}レポジトリインストール
  yum:
    name: "{{ pg_url }}"
    state: present
  tags: postgresql

- name: PostgreSQL{{ pg_version }}レポジトリ有効化
  replace:
    dest: /etc/yum.repos.d/pgdg-{{pg_number}}-centos.repo
    regexp: '^enabled=1$'
    replace: 'enabled=0'
  tags: postgresql

# ========================================================
# postgresqlのインストール
# ========================================================z
- name: postgresql{{ pg_number }}インストール
  yum:
    name: "{{ item }}"
    enablerepo: pgdg{{ pg_number }}
    state: present
  with_items:
    - postgresql{{ pg_number }}
    - postgresql{{ pg_number }}-devel
    - postgresql{{ pg_number }}-libs
    - postgresql{{ pg_number }}-server
  tags: postgresql

# ========================================================
# データディレクトリを準備//通常はデフォルトpathがすでにある。特定のディレクトリに変えたい場合実行される
# ========================================================z
- name: make directory for dbroot 1
  file: path={{ dbroot }} state=directory owner=postgres group=postgres mode=700
  tags: postgresql

- name: make directory for dbroot 2
  file: path={{ dbroot }}/data state=directory owner=postgres group=postgres mode=700
  tags: postgresql

- name: make directory for dbroot 3
  file: path={{ dbroot }}/backups state=directory owner=postgres group=postgres mode=700
  tags: postgresql

  #TODO add service centos6
  #- name: copy postgresql-{{ pg_version }}.service
  #  template: src=postgresql-{{ pg_version }}.service.j2 dest=/usr/lib/systemd/system/postgresql-{{ pg_version }}.service owner=root group=root mode=0644
  #  when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "7")
  #  tags: postgresql

# ========================================================
# 設定済みかの確認
# ========================================================z
- name: postgresql.confが存在するか判定
  stat:
    path: "{{ dbroot }}/data/postgresql.conf"
  register: is_initialized
  changed_when: false
  check_mode: no
  ignore_errors: true
  tags: postgresql

# ========================================================
# データベースクラスタ作成
# ========================================================z
- name: postgres:initdb データベースクラスタ作成
  shell: /usr/pgsql-{{ pg_version }}/bin/initdb --no-locale --encoding=UTF8 -D {{ dbroot }}/data
  become: yes
  become_user: postgres
  when: not is_initialized.stat.exists
  tags: postgresql

# ========================================================
# 設定ファイルをアップロード
# ========================================================z
- name: pg_hba.confのアップロード #上書き
  template: src=pg_hba.conf.j2 dest={{ dbroot }}/data/pg_hba.conf
  when: not is_initialized.stat.exists
  tags: postgresql

- name: postgresql.confのアップロード #上書きしない
  copy: src=postgresql.conf dest={{ dbroot }}/data/postgresql.conf follow=yes
  when: not is_initialized.stat.exists
  notify: restart postgresql{{ pg_number }}
  tags: postgresql

- name: postgresql.confの設定 if 9.2
  replace:
    dest: "{{ dbroot }}/data/postgresql.conf"
    regexp: "^dynamic_shared_memory_type = posix"
    replace: '#dynamic_shared_memory_type = posix'
  when: (not is_initialized.stat.exists) and pg_version == 9.2
  tags: postgresql

# ========================================================
# 自動起動設定&起動
# ========================================================z
- name: postgresql{{ pg_number }}自動起動設定&起動
  service: name=postgresql-{{ pg_version }} state=started enabled=yes
  when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "6")
  tags: postgresql

# ========================================================
# postgresユーザのパスワード初期化
# ========================================================z
- name: postgresロールのパスワード設定
  shell: /usr/bin/psql -U postgres -c "ALTER USER {{ db_user_name }} with unencrypted password '{{ db_user_password }}';"
  become: yes
  become_user: postgres
  when: not is_initialized.stat.exists
  tags: postgresql

# ========================================================
# アクセス方法を設定
# ========================================================z
- name: config pg_hba.conf
  template: src=pg_hba.conf2.j2 dest={{ dbroot }}/data/pg_hba.conf
  when: not is_initialized.stat.exists
  notify: restart postgresql{{ pg_number }}
  tags: postgresql

## ========================================================
## バックアップ設定
## ========================================================z
#- name: make dir backup
#  file: path=/home/{{ main_username }}/backup state=directory owner={{ main_username }} group={{ main_username }} mode=700
#  tags: postgresql
#- name: copy pgpass
#  template: src=pgpass dest=/home/{{ main_username }}/.pgpass owner={{ main_username }} group={{ main_username }} mode=0600
#  tags: postgresql
#- name: copy backup sh
#  template: src=backup_all.sh dest=/home/{{ main_username }}/backup_all.sh owner={{ main_username }} group={{ main_username }} mode=0600
#  tags: postgresql
#- name: set cron for db backup
#  cron:
#    name: 'db backup'
#    minute: '30'
#    hour:  '5'
#    job: 'source ~/.bash_profile; /bin/sh /home/{{ main_username }}/backup_all.sh;'
#    user: '{{ main_username }}'
#    cron_file: 'backup_all'
#  tags: postgresql
